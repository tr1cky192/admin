{"ast":null,"code":"var _jsxFileName = \"D:\\\\ad\\\\Adminka\\\\src\\\\components\\\\pages\\\\LoginPage\\\\LoginPage.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const LoginPage = () => {\n//   const [email, setEmail] = useState('');\n//   const [verificationCode, setVerificationCode] = useState('');\n//   const [isCodeSent, setIsCodeSent] = useState(false);\n//   const [userRole, setUserRole] = useState<string | null>(null);\n\n//   const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setEmail(e.target.value);\n//   };\n\n//   const handleVerificationCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setVerificationCode(e.target.value);\n//   };\n//   // const sendEmail = async () => {\n//   //   try {\n//   //     const response = await axios.get(\n//   //       'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin/',\n//   //       {\n//   //         params: {\n//   //           email: `${email}`, // Pass the email as a query parameter\n//   //         },\n//   //       }\n//   //     );\n\n//   //     const { status, data } = response.data;\n//   //     if (status === 'success') {\n//   //       setIsCodeSent(true);\n//   //     } else {\n//   //       console.error('Email verification failed');\n//   //     }\n//   //   } catch (error) {\n//   //     console.error('Error while verifying the email', error);\n//   //   }\n//   // };\n//   const sendVerificationCode = async () => {\n//     try {\n//       const response = await axios.get(\n//         'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin/',\n//         {\n//           params: {\n//             email: `${email}`,\n//           },\n//         }\n//       );\n\n//       const { status, data } = response.data;\n//       if (status === 'success') {\n//         if (data && data.role) {\n//           setIsCodeSent(true);\n//           setUserRole(data.role as string | null);\n//         } else {\n//           console.error('Role information is missing in the response data');\n//         }\n//       } else {\n//         console.error('Verification failed');\n//       }\n//     } catch (error) {\n//       console.error('Error while verifying the secret code', error);\n//     }\n//   };\n\n//   const verifyCode = async () => {\n//     try {\n//       if (userRole === 'superadmin') {\n//         console.log('Super Admin Access');\n//       } else if (userRole === 'admin') {\n//         console.log('Admin Access');\n//       } else {\n//         console.error('Invalid user role');\n//       }\n//     } catch (error) {\n//       console.error('Code verification failed', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {isCodeSent ? (\n//         <div>\n//           <label>Email:\n//             <input type=\"email\" value={email} onChange={handleEmailChange} />\n//           </label>\n//           <label>Verification Code:\n//             <input type=\"text\" value={verificationCode} onChange={handleVerificationCodeChange} />\n//           </label>\n//           <button type=\"button\" onClick={verifyCode}>Verify Code</button>\n//         </div>\n//       ) : (\n//         <div>\n//           <label>Email:\n//             <input type=\"email\" value={email} onChange={handleEmailChange} />\n//           </label>\n//           <button type=\"button\" onClick={sendVerificationCode}>Send Verification Code</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export { LoginPage };\n// import React, { useState } from 'react';\n// import axios from 'axios';  // Make sure to import Axios\n\n// const LoginPage = () => {\n//   const [email, setEmail] = useState<string>('');\n//   const [secretCode, setSecretCode] = useState<string>('');\n//   const [loggedInUser, setLoggedInUser] = useState<{ role: string; token: string }>({\n//     role: '',\n//     token: '',\n//   });\n//   const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setEmail(e.target.value);\n//   };\n//   const checkAdminEmail = async () => {\n//     try {\n//       const response = await axios.get(\n//         'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin'\n//       );\n//       setEmail(response.data.email as string);\n//     } catch (error) {\n//       console.error('Error checking admin email:', error);\n//     }\n//   };\n\n//   const loginAdmin = async () => {\n//     try {\n//       const response = await axios.post(\n//         'https://server-your-price-booking.onrender.com/api/acsess-to-admin/log-in-admin',\n//         {\n//           email,\n//           secretCode,\n//         }\n//       );\n//       setLoggedInUser(response.data.user as { role: string; token: string });\n//     } catch (error) {\n//       console.error('Error logging in:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//   {!email ? (\n//     <button type=\"button\" onClick={checkAdminEmail}>c</button>\n//   ) : (\n//     <div>\n//       <p>Admin Email: {email}</p>\n//       <input\n//           type=\"email\"\n//           placeholder=\"Enter Email\"\n//           value={email}\n//           onChange={handleEmailChange}\n//         />\n//       <input\n//         type=\"text\" // Keep the type as \"text\" for the secret code\n//         placeholder=\"Enter Secret Code\"\n//         value={secretCode}\n//         onChange={(e) => setSecretCode(e.target.value)}\n//       />\n//       <button type=\"submit\" onClick={loginAdmin}>Login</button>\n//     </div>\n//   )}\n//   {loggedInUser && (\n//     <div>\n//       <p>Welcome, {loggedInUser.role}</p>\n//       <p>Token: {loggedInUser.token}</p>\n//     </div>\n//   )}\n// </div>\n//   );\n// };\n\n// export  {LoginPage};import React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [isCodeSent, setIsCodeSent] = useState(false);\n  const handleEmailChange = e => {\n    setEmail(e.target.value);\n  };\n  const sendVerificationCode = async () => {\n    try {\n      // Send a request to obtain a verification code for the given email\n      const response = await axios.get('https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin/', {\n        params: {\n          email: email\n        }\n      });\n\n      // Assuming the response contains success or error status\n      const {\n        status\n      } = response.data;\n      if (status === 'success') {\n        setIsCodeSent(true);\n      } else {\n        console.error('Error: Verification code not sent');\n      }\n    } catch (error) {\n      console.error('Error while sending the verification code:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isCodeSent ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Enter Email\",\n          value: email,\n          onChange: handleEmailChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: sendVerificationCode,\n        children: \"Send Verification Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // You can display the code input and verification logic here\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Verification Code:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Verification Code\",\n          value: verificationCode,\n          onChange: e => setVerificationCode(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: verifyCode,\n        children: \"Verify Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"XP5xCAAfSKFUpV6bhdZSGoxT1Bg=\");\n_c = LoginPage;\nexport { LoginPage };\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["axios","jsxDEV","_jsxDEV","LoginPage","_s","email","setEmail","useState","isCodeSent","setIsCodeSent","handleEmailChange","e","target","value","sendVerificationCode","response","get","params","status","data","console","error","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","verificationCode","setVerificationCode","verifyCode","_c","$RefreshReg$"],"sources":["D:/ad/Adminka/src/components/pages/LoginPage/LoginPage.tsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n\r\n// const LoginPage = () => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [verificationCode, setVerificationCode] = useState('');\r\n//   const [isCodeSent, setIsCodeSent] = useState(false);\r\n//   const [userRole, setUserRole] = useState<string | null>(null);\r\n\r\n//   const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setEmail(e.target.value);\r\n//   };\r\n  \r\n//   const handleVerificationCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setVerificationCode(e.target.value);\r\n//   };\r\n//   // const sendEmail = async () => {\r\n//   //   try {\r\n//   //     const response = await axios.get(\r\n//   //       'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin/',\r\n//   //       {\r\n//   //         params: {\r\n//   //           email: `${email}`, // Pass the email as a query parameter\r\n//   //         },\r\n//   //       }\r\n//   //     );\r\n  \r\n//   //     const { status, data } = response.data;\r\n//   //     if (status === 'success') {\r\n//   //       setIsCodeSent(true);\r\n//   //     } else {\r\n//   //       console.error('Email verification failed');\r\n//   //     }\r\n//   //   } catch (error) {\r\n//   //     console.error('Error while verifying the email', error);\r\n//   //   }\r\n//   // };\r\n//   const sendVerificationCode = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin/',\r\n//         {\r\n//           params: {\r\n//             email: `${email}`,\r\n//           },\r\n//         }\r\n//       );\r\n\r\n  \r\n//       const { status, data } = response.data;\r\n//       if (status === 'success') {\r\n//         if (data && data.role) {\r\n//           setIsCodeSent(true);\r\n//           setUserRole(data.role as string | null);\r\n//         } else {\r\n//           console.error('Role information is missing in the response data');\r\n//         }\r\n//       } else {\r\n//         console.error('Verification failed');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error while verifying the secret code', error);\r\n//     }\r\n//   };\r\n\r\n//   const verifyCode = async () => {\r\n//     try {\r\n//       if (userRole === 'superadmin') {\r\n//         console.log('Super Admin Access');\r\n//       } else if (userRole === 'admin') {\r\n//         console.log('Admin Access');\r\n//       } else {\r\n//         console.error('Invalid user role');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Code verification failed', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       {isCodeSent ? (\r\n//         <div>\r\n//           <label>Email:\r\n//             <input type=\"email\" value={email} onChange={handleEmailChange} />\r\n//           </label>\r\n//           <label>Verification Code:\r\n//             <input type=\"text\" value={verificationCode} onChange={handleVerificationCodeChange} />\r\n//           </label>\r\n//           <button type=\"button\" onClick={verifyCode}>Verify Code</button>\r\n//         </div>\r\n//       ) : (\r\n//         <div>\r\n//           <label>Email:\r\n//             <input type=\"email\" value={email} onChange={handleEmailChange} />\r\n//           </label>\r\n//           <button type=\"button\" onClick={sendVerificationCode}>Send Verification Code</button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export { LoginPage };\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';  // Make sure to import Axios\r\n\r\n\r\n// const LoginPage = () => {\r\n//   const [email, setEmail] = useState<string>('');\r\n//   const [secretCode, setSecretCode] = useState<string>('');\r\n//   const [loggedInUser, setLoggedInUser] = useState<{ role: string; token: string }>({\r\n//     role: '',\r\n//     token: '',\r\n//   });\r\n//   const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setEmail(e.target.value);\r\n//   };\r\n//   const checkAdminEmail = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin'\r\n//       );\r\n//       setEmail(response.data.email as string);\r\n//     } catch (error) {\r\n//       console.error('Error checking admin email:', error);\r\n//     }\r\n//   };\r\n\r\n//   const loginAdmin = async () => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         'https://server-your-price-booking.onrender.com/api/acsess-to-admin/log-in-admin',\r\n//         {\r\n//           email,\r\n//           secretCode,\r\n//         }\r\n//       );\r\n//       setLoggedInUser(response.data.user as { role: string; token: string });\r\n//     } catch (error) {\r\n//       console.error('Error logging in:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//   {!email ? (\r\n//     <button type=\"button\" onClick={checkAdminEmail}>c</button>\r\n//   ) : (\r\n//     <div>\r\n//       <p>Admin Email: {email}</p>\r\n//       <input\r\n//           type=\"email\"\r\n//           placeholder=\"Enter Email\"\r\n//           value={email}\r\n//           onChange={handleEmailChange}\r\n//         />\r\n//       <input\r\n//         type=\"text\" // Keep the type as \"text\" for the secret code\r\n//         placeholder=\"Enter Secret Code\"\r\n//         value={secretCode}\r\n//         onChange={(e) => setSecretCode(e.target.value)}\r\n//       />\r\n//       <button type=\"submit\" onClick={loginAdmin}>Login</button>\r\n//     </div>\r\n//   )}\r\n//   {loggedInUser && (\r\n//     <div>\r\n//       <p>Welcome, {loggedInUser.role}</p>\r\n//       <p>Token: {loggedInUser.token}</p>\r\n//     </div>\r\n//   )}\r\n// </div>\r\n//   );\r\n// };\r\n\r\n// export  {LoginPage};import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LoginPage = () => {\r\n  const [email, setEmail] = useState<string>('');\r\n  const [isCodeSent, setIsCodeSent] = useState(false);\r\n\r\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setEmail(e.target.value);\r\n  };\r\n\r\n  const sendVerificationCode = async () => {\r\n    try {\r\n      // Send a request to obtain a verification code for the given email\r\n      const response = await axios.get(\r\n        'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin/',\r\n        {\r\n          params: {\r\n            email: email,\r\n          },\r\n        }\r\n      );\r\n\r\n      // Assuming the response contains success or error status\r\n      const { status } = response.data;\r\n\r\n      if (status === 'success') {\r\n        setIsCodeSent(true);\r\n      } else {\r\n        console.error('Error: Verification code not sent');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error while sending the verification code:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!isCodeSent ? (\r\n        <div>\r\n          <label>Email:\r\n            <input\r\n              type=\"email\"\r\n              placeholder=\"Enter Email\"\r\n              value={email}\r\n              onChange={handleEmailChange}\r\n            />\r\n          </label>\r\n          <button type=\"button\" onClick={sendVerificationCode}>Send Verification Code</button>\r\n        </div>\r\n      ) : (\r\n        // You can display the code input and verification logic here\r\n        <div>\r\n          <label>Verification Code:\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter Verification Code\"\r\n              value={verificationCode}\r\n              onChange={(e) => setVerificationCode(e.target.value)}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" onClick={verifyCode}>Verify Code</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { LoginPage };\r\n"],"mappings":";;AAAA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMG,iBAAiB,GAAIC,CAAsC,IAAK;IACpEL,QAAQ,CAACK,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAC9B,iFAAiF,EACjF;QACEC,MAAM,EAAE;UACNZ,KAAK,EAAEA;QACT;MACF,CACF,CAAC;;MAED;MACA,MAAM;QAAEa;MAAO,CAAC,GAAGH,QAAQ,CAACI,IAAI;MAEhC,IAAID,MAAM,KAAK,SAAS,EAAE;QACxBT,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,MAAM;QACLW,OAAO,CAACC,KAAK,CAAC,mCAAmC,CAAC;MACpD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IACpE;EACF,CAAC;EAED,oBACEnB,OAAA;IAAAoB,QAAA,EACG,CAACd,UAAU,gBACVN,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,GAAO,QACL,eAAApB,OAAA;UACEqB,IAAI,EAAC,OAAO;UACZC,WAAW,EAAC,aAAa;UACzBX,KAAK,EAAER,KAAM;UACboB,QAAQ,EAAEf;QAAkB;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACR3B,OAAA;QAAQqB,IAAI,EAAC,QAAQ;QAACO,OAAO,EAAEhB,oBAAqB;QAAAQ,QAAA,EAAC;MAAsB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjF,CAAC;IAAA;IAEN;IACA3B,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,GAAO,oBACL,eAAApB,OAAA;UACEqB,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,yBAAyB;UACrCX,KAAK,EAAEkB,gBAAiB;UACxBN,QAAQ,EAAGd,CAAC,IAAKqB,mBAAmB,CAACrB,CAAC,CAACC,MAAM,CAACC,KAAK;QAAE;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACR3B,OAAA;QAAQqB,IAAI,EAAC,QAAQ;QAACO,OAAO,EAAEG,UAAW;QAAAX,QAAA,EAAC;MAAW;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACzB,EAAA,CA/DID,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AAiEf,SAASA,SAAS;AAAG,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}