{"ast":null,"code":"var _jsxFileName = \"D:\\\\ad\\\\Adminka\\\\src\\\\components\\\\pages\\\\Access\\\\PasswordField\\\\PasswordField.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport { setToken } from 'features/access/tokenSlice';\nimport { useAppDispatch } from 'App';\nimport { Input, EnterPass, VerifPass, PasswordFieldWrapper, NotVerifPass } from './PasswordField.styled';\nimport { Button } from '../Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Admin = {\n  \"status\": \"success\",\n  \"code\": 200,\n  \"user\": {\n    \"_id\": \"6536cb40578c40e354fad54d\",\n    \"access\": [\"Statistics and access to cabinets\"],\n    \"status\": \"active\",\n    \"role\": \"admin\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1MzZjYjQwNTc4YzQwZTM1NGZhZDU0ZCIsImlhdCI6MTY5ODMwNzM5MywiZXhwIjoxNjk4MzEwOTkzfQ.TCMVGYiMMW5kwrAWyxblT98fTcXAT8CPA2rJADZYUZw\"\n  }\n};\nexport const PasswordField = _ref => {\n  _s();\n  let {\n    setIsSend,\n    email\n  } = _ref;\n  const [passwordCode, setPasswordCode] = useState('');\n  const [messagePass, setMessagePass] = useState('');\n  const formRef = useRef(null);\n  const dispatch = useAppDispatch();\n  // const navigate = useNavigate();\n\n  // const key = '1111';\n\n  // const validPassword = (): boolean => {\n  //   const result = passwordCode !== key;\n  //   return result;\n  // };\n\n  const validPassword = async () => {\n    try {\n      const customResponse = {\n        data: {\n          status: Admin.status,\n          data: {\n            token: Admin.user.token\n          },\n          user: {\n            role: Admin.user.role\n          }\n        },\n        status: 200,\n        statusText: 'OK',\n        headers: {\n          'content-type': 'application/json'\n        },\n        config: {}\n      };\n      const {\n        status,\n        data,\n        user\n      } = customResponse.data;\n      if (status === 'success') {\n        dispatch(setToken(data.token));\n        if (user && user.role) {\n          if (user.role === 'super admin') {\n            // Handle super admin login\n            // user.role === 'super admin'\n          } else if (user.role === 'admin') {\n            // Handle admin login\n            // user.role === 'admin'\n          }\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('Error during password verification', error);\n      return false;\n    }\n\n    // Add a default return statement to ensure no undefined is returned.\n  };\n\n  const handleVerificationCodeChange = e => {\n    setPasswordCode(e.target.value);\n  };\n  const handlePasswordSubmit = async e => {\n    e.preventDefault();\n    if (!(await validPassword())) {\n      setMessagePass('You entered a wrong verification code, try again');\n    } else {\n      setIsSend(true);\n      // navigate('/');\n    }\n  };\n  // const handleKeyUp = async (e: React.KeyboardEvent<HTMLInputElement>) => {\n  //   if (e.key === 'Enter') {\n  //     e.preventDefault();\n  //     await handlePasswordSubmit(e as any); \n  //   }\n  // };\n  const handleKeyUp = useCallback(e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      if (formRef.current) {\n        formRef.current.dispatchEvent(new Event('submit', {\n          cancelable: true\n        }));\n      }\n    }\n  }, []);\n\n  // console.log(dataForToken)\n\n  return /*#__PURE__*/_jsxDEV(PasswordFieldWrapper, {\n    children: [messagePass ? /*#__PURE__*/_jsxDEV(NotVerifPass, {\n      children: messagePass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(EnterPass, {\n      children: \"Enter the verification code we sent to your email address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handlePasswordSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        name: \"verificationCode\",\n        value: passwordCode,\n        onChange: handleVerificationCodeChange,\n        required: true,\n        onKeyDown: handleKeyUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VerifPass, {\n      children: \"Verification code - valid for 3 minutes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(PasswordField, \"NsT1RKp7+sP9dHzAeFcwBfaj9g0=\", false, function () {\n  return [useAppDispatch];\n});\n_c = PasswordField;\nvar _c;\n$RefreshReg$(_c, \"PasswordField\");","map":{"version":3,"names":["React","useState","useCallback","useRef","setToken","useAppDispatch","Input","EnterPass","VerifPass","PasswordFieldWrapper","NotVerifPass","Button","jsxDEV","_jsxDEV","Admin","PasswordField","_ref","_s","setIsSend","email","passwordCode","setPasswordCode","messagePass","setMessagePass","formRef","dispatch","validPassword","customResponse","data","status","token","user","role","statusText","headers","config","error","console","handleVerificationCodeChange","e","target","value","handlePasswordSubmit","preventDefault","handleKeyUp","key","current","dispatchEvent","Event","cancelable","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","onChange","required","onKeyDown","_c","$RefreshReg$"],"sources":["D:/ad/Adminka/src/components/pages/Access/PasswordField/PasswordField.tsx"],"sourcesContent":["import React, { useState , useCallback, useRef } from 'react';\nimport type { AxiosResponse } from 'axios';\nimport { setToken } from 'features/access/tokenSlice';\nimport { useAppDispatch } from 'App';\nimport {\n  Input,\n  EnterPass,\n  VerifPass,\n  PasswordFieldWrapper,\n  NotVerifPass,\n} from './PasswordField.styled';\nimport { Button } from '../Button';\n\n\nconst Admin = {\n  \"status\": \"success\",\n  \"code\": 200,\n  \"user\": {\n    \"_id\": \"6536cb40578c40e354fad54d\",\n    \"access\": [\n      \"Statistics and access to cabinets\"\n    ],\n    \"status\": \"active\",\n    \"role\": \"admin\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1MzZjYjQwNTc4YzQwZTM1NGZhZDU0ZCIsImlhdCI6MTY5ODMwNzM5MywiZXhwIjoxNjk4MzEwOTkzfQ.TCMVGYiMMW5kwrAWyxblT98fTcXAT8CPA2rJADZYUZw\"\n  }\n};\n\ntype ResponseData = {\n  status: string;\n  data: {\n    token: string;\n  };\n  user?: {\n    role: string;\n  };\n};\n\nexport const PasswordField: React.FC<{\n  setIsSend: React.Dispatch<React.SetStateAction<boolean>>;\n  email: string;\n}> = ({ setIsSend, email }) => {\n  const [passwordCode, setPasswordCode] = useState<string>('');\n  const [messagePass, setMessagePass] = useState<string>('');\n  const formRef = useRef<HTMLFormElement | null>(null);\n  const dispatch = useAppDispatch();\n  // const navigate = useNavigate();\n\n  // const key = '1111';\n\n  // const validPassword = (): boolean => {\n  //   const result = passwordCode !== key;\n  //   return result;\n  // };\n\n\n\n  const validPassword = async (): Promise<boolean> => {\n    try {\n      const customResponse: AxiosResponse<ResponseData> = {\n        data: {\n          status: Admin.status,\n          data: { token: Admin.user.token },\n          user: { role: Admin.user.role },\n        },\n        status: 200,\n        statusText: 'OK',\n        headers: {\n          'content-type': 'application/json',\n        },\n        config: {},\n      };\n  \n      const { status, data, user } = customResponse.data;\n  \n      if (status === 'success') {\n        dispatch(setToken(data.token));\n  \n        if (user && user.role) {\n          if (user.role === 'super admin') {\n            // Handle super admin login\n            // user.role === 'super admin'\n          } else if (user.role === 'admin') {\n            // Handle admin login\n            // user.role === 'admin'\n          }\n  \n          return true;\n        }\n       \n      }\n      return false;\n    } catch (error) {\n      console.error('Error during password verification', error);\n      return false;\n    }\n    \n    // Add a default return statement to ensure no undefined is returned.\n\n  };\n\n  const handleVerificationCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPasswordCode(e.target.value);\n  };\n  \n\n  const handlePasswordSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!(await validPassword())) {\n      setMessagePass('You entered a wrong verification code, try again');\n    } else {\n      setIsSend(true);\n      // navigate('/');\n    }\n  };\n  // const handleKeyUp = async (e: React.KeyboardEvent<HTMLInputElement>) => {\n  //   if (e.key === 'Enter') {\n  //     e.preventDefault();\n  //     await handlePasswordSubmit(e as any); \n  //   }\n  // };\n  const handleKeyUp = useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n          e.preventDefault();\n          if (formRef.current) {\n            formRef.current.dispatchEvent(new Event('submit', { cancelable: true }));\n          }\n        }\n      }, []);\n    \n  // console.log(dataForToken)\n\n  return (\n    <PasswordFieldWrapper>\n      {messagePass ? (\n        <NotVerifPass>{messagePass}</NotVerifPass>\n      ) : (\n        <EnterPass>Enter the verification code we sent to your email address</EnterPass>\n      )}\n      <form onSubmit={handlePasswordSubmit}>\n        <Input\n          type=\"text\"\n          name=\"verificationCode\"\n          value={passwordCode}\n          onChange={handleVerificationCodeChange}\n          required\n          onKeyDown={handleKeyUp}\n        />\n        <Button />\n      </form>\n      <VerifPass>Verification code - valid for 3 minutes</VerifPass>\n    </PasswordFieldWrapper>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}