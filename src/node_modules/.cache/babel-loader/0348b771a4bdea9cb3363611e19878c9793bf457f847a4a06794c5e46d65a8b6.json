{"ast":null,"code":"import { createSelector } from '@reduxjs/toolkit';\nimport { countriesAdapter, countriesInitialState } from './countriesAdapter';\nimport { selectCountriesResult } from './countriesApi';\nimport { selectActiveCountryId } from './countriesSlice';\n\n/** Creates memoized selector\n * returns normalized state object with ids and entities */\nconst selectCountriesData = createSelector(selectCountriesResult, result => result.data);\nexport const {\n  selectEntities: selectCountriesEntities,\n  selectById: selectCountryById,\n  selectIds: selectCountriesIds\n} = countriesAdapter.getSelectors(state => {\n  var _selectCountriesData;\n  return (_selectCountriesData = selectCountriesData(state)) !== null && _selectCountriesData !== void 0 ? _selectCountriesData : countriesInitialState;\n});\nexport const selectActiveCountry = createSelector(selectCountriesEntities, selectActiveCountryId, (countriesEntities, id) => id ? countriesEntities[id] : undefined);\nexport const selectActiveCountryName = createSelector(selectActiveCountry, activeCountry => activeCountry === null || activeCountry === void 0 ? void 0 : activeCountry.country);\nexport const selectActiveCountryInternational = createSelector(selectActiveCountry, activeCountry => activeCountry === null || activeCountry === void 0 ? void 0 : activeCountry.international);","map":{"version":3,"names":["createSelector","countriesAdapter","countriesInitialState","selectCountriesResult","selectActiveCountryId","selectCountriesData","result","data","selectEntities","selectCountriesEntities","selectById","selectCountryById","selectIds","selectCountriesIds","getSelectors","state","_selectCountriesData","selectActiveCountry","countriesEntities","id","undefined","selectActiveCountryName","activeCountry","country","selectActiveCountryInternational","international"],"sources":["D:/ad/Adminka/src/features/countries/countriesSelectors.ts"],"sourcesContent":["import type { RootState } from 'App/store';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { countriesAdapter, countriesInitialState } from './countriesAdapter';\nimport { selectCountriesResult } from './countriesApi';\nimport { selectActiveCountryId } from './countriesSlice';\n\n/** Creates memoized selector\n * returns normalized state object with ids and entities */\nconst selectCountriesData = createSelector(selectCountriesResult, result => result.data);\n\nexport const {\n  selectEntities: selectCountriesEntities,\n  selectById: selectCountryById,\n  selectIds: selectCountriesIds,\n} = countriesAdapter.getSelectors<RootState>(\n  state => selectCountriesData(state) ?? countriesInitialState\n);\n\nexport const selectActiveCountry = createSelector(\n  selectCountriesEntities,\n  selectActiveCountryId,\n  (countriesEntities, id) => (id ? countriesEntities[id] : undefined)\n);\n\nexport const selectActiveCountryName = createSelector(\n  selectActiveCountry,\n  activeCountry => activeCountry?.country\n);\n\nexport const selectActiveCountryInternational = createSelector(\n  selectActiveCountry,\n  activeCountry => activeCountry?.international\n);\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,gBAAgB,EAAEC,qBAAqB,QAAQ,oBAAoB;AAC5E,SAASC,qBAAqB,QAAQ,gBAAgB;AACtD,SAASC,qBAAqB,QAAQ,kBAAkB;;AAExD;AACA;AACA,MAAMC,mBAAmB,GAAGL,cAAc,CAACG,qBAAqB,EAAEG,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC;AAExF,OAAO,MAAM;EACXC,cAAc,EAAEC,uBAAuB;EACvCC,UAAU,EAAEC,iBAAiB;EAC7BC,SAAS,EAAEC;AACb,CAAC,GAAGZ,gBAAgB,CAACa,YAAY,CAC/BC,KAAK;EAAA,IAAAC,oBAAA;EAAA,QAAAA,oBAAA,GAAIX,mBAAmB,CAACU,KAAK,CAAC,cAAAC,oBAAA,cAAAA,oBAAA,GAAId,qBAAqB;AAAA,CAC9D,CAAC;AAED,OAAO,MAAMe,mBAAmB,GAAGjB,cAAc,CAC/CS,uBAAuB,EACvBL,qBAAqB,EACrB,CAACc,iBAAiB,EAAEC,EAAE,KAAMA,EAAE,GAAGD,iBAAiB,CAACC,EAAE,CAAC,GAAGC,SAC3D,CAAC;AAED,OAAO,MAAMC,uBAAuB,GAAGrB,cAAc,CACnDiB,mBAAmB,EACnBK,aAAa,IAAIA,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEC,OAClC,CAAC;AAED,OAAO,MAAMC,gCAAgC,GAAGxB,cAAc,CAC5DiB,mBAAmB,EACnBK,aAAa,IAAIA,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEG,aAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}