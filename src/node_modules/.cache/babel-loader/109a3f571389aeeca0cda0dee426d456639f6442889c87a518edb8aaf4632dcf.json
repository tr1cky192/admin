{"ast":null,"code":"var _jsxFileName = \"D:\\\\ad\\\\Adminka\\\\src\\\\components\\\\pages\\\\LoginPage\\\\LoginPage.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const LoginPage = () => {\n//   const [email, setEmail] = useState('');\n//   const [verificationCode, setVerificationCode] = useState('');\n//   const [isCodeSent, setIsCodeSent] = useState(false);\n//   const [userRole, setUserRole] = useState<string | null>(null);\n\n//   const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setEmail(e.target.value);\n//   };\n\n//   const handleVerificationCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setVerificationCode(e.target.value);\n//   };\n//   // const sendEmail = async () => {\n//   //   try {\n//   //     const response = await axios.get(\n//   //       'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin/',\n//   //       {\n//   //         params: {\n//   //           email: `${email}`, // Pass the email as a query parameter\n//   //         },\n//   //       }\n//   //     );\n\n//   //     const { status, data } = response.data;\n//   //     if (status === 'success') {\n//   //       setIsCodeSent(true);\n//   //     } else {\n//   //       console.error('Email verification failed');\n//   //     }\n//   //   } catch (error) {\n//   //     console.error('Error while verifying the email', error);\n//   //   }\n//   // };\n//   const sendVerificationCode = async () => {\n//     try {\n//       const response = await axios.get(\n//         'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin/',\n//         {\n//           params: {\n//             email: `${email}`,\n//           },\n//         }\n//       );\n\n//       const { status, data } = response.data;\n//       if (status === 'success') {\n//         if (data && data.role) {\n//           setIsCodeSent(true);\n//           setUserRole(data.role as string | null);\n//         } else {\n//           console.error('Role information is missing in the response data');\n//         }\n//       } else {\n//         console.error('Verification failed');\n//       }\n//     } catch (error) {\n//       console.error('Error while verifying the secret code', error);\n//     }\n//   };\n\n//   const verifyCode = async () => {\n//     try {\n//       if (userRole === 'superadmin') {\n//         console.log('Super Admin Access');\n//       } else if (userRole === 'admin') {\n//         console.log('Admin Access');\n//       } else {\n//         console.error('Invalid user role');\n//       }\n//     } catch (error) {\n//       console.error('Code verification failed', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {isCodeSent ? (\n//         <div>\n//           <label>Email:\n//             <input type=\"email\" value={email} onChange={handleEmailChange} />\n//           </label>\n//           <label>Verification Code:\n//             <input type=\"text\" value={verificationCode} onChange={handleVerificationCodeChange} />\n//           </label>\n//           <button type=\"button\" onClick={verifyCode}>Verify Code</button>\n//         </div>\n//       ) : (\n//         <div>\n//           <label>Email:\n//             <input type=\"email\" value={email} onChange={handleEmailChange} />\n//           </label>\n//           <button type=\"button\" onClick={sendVerificationCode}>Send Verification Code</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export { LoginPage };\nimport React, { useState } from 'react';\nimport axios from 'axios'; // Make sure to import Axios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [secretCode, setSecretCode] = useState('');\n  const [loggedInUser, setLoggedInUser] = useState({\n    role: '',\n    token: ''\n  });\n  const checkAdminEmail = async () => {\n    try {\n      const response = await axios.get('https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin');\n      setEmail(response.data.email);\n    } catch (error) {\n      console.error('Error checking admin email:', error);\n    }\n  };\n  const loginAdmin = async () => {\n    try {\n      const response = await axios.post('https://server-your-price-booking.onrender.com/api/acsess-to-admin/log-in-admin', {\n        email,\n        secretCode\n      });\n      setLoggedInUser(response.data.user);\n    } catch (error) {\n      console.error('Error logging in:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!email ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: checkAdminEmail,\n      children: \"Check Admin Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Admin Email: \", email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Secret Code\",\n        value: secretCode,\n        onChange: e => setSecretCode(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: loginAdmin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), loggedInUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Welcome, \", loggedInUser.role]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Token: \", loggedInUser.token]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"nhSX7lrnf1xm2N6EEfZj0BaPbeA=\");\n_c = LoginPage;\nexport { LoginPage };\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","LoginPage","_s","email","setEmail","secretCode","setSecretCode","loggedInUser","setLoggedInUser","role","token","checkAdminEmail","response","get","data","error","console","loginAdmin","post","user","children","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/ad/Adminka/src/components/pages/LoginPage/LoginPage.tsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n\r\n// const LoginPage = () => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [verificationCode, setVerificationCode] = useState('');\r\n//   const [isCodeSent, setIsCodeSent] = useState(false);\r\n//   const [userRole, setUserRole] = useState<string | null>(null);\r\n\r\n//   const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setEmail(e.target.value);\r\n//   };\r\n  \r\n//   const handleVerificationCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setVerificationCode(e.target.value);\r\n//   };\r\n//   // const sendEmail = async () => {\r\n//   //   try {\r\n//   //     const response = await axios.get(\r\n//   //       'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin/',\r\n//   //       {\r\n//   //         params: {\r\n//   //           email: `${email}`, // Pass the email as a query parameter\r\n//   //         },\r\n//   //       }\r\n//   //     );\r\n  \r\n//   //     const { status, data } = response.data;\r\n//   //     if (status === 'success') {\r\n//   //       setIsCodeSent(true);\r\n//   //     } else {\r\n//   //       console.error('Email verification failed');\r\n//   //     }\r\n//   //   } catch (error) {\r\n//   //     console.error('Error while verifying the email', error);\r\n//   //   }\r\n//   // };\r\n//   const sendVerificationCode = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin/',\r\n//         {\r\n//           params: {\r\n//             email: `${email}`,\r\n//           },\r\n//         }\r\n//       );\r\n\r\n  \r\n//       const { status, data } = response.data;\r\n//       if (status === 'success') {\r\n//         if (data && data.role) {\r\n//           setIsCodeSent(true);\r\n//           setUserRole(data.role as string | null);\r\n//         } else {\r\n//           console.error('Role information is missing in the response data');\r\n//         }\r\n//       } else {\r\n//         console.error('Verification failed');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error while verifying the secret code', error);\r\n//     }\r\n//   };\r\n\r\n//   const verifyCode = async () => {\r\n//     try {\r\n//       if (userRole === 'superadmin') {\r\n//         console.log('Super Admin Access');\r\n//       } else if (userRole === 'admin') {\r\n//         console.log('Admin Access');\r\n//       } else {\r\n//         console.error('Invalid user role');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Code verification failed', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       {isCodeSent ? (\r\n//         <div>\r\n//           <label>Email:\r\n//             <input type=\"email\" value={email} onChange={handleEmailChange} />\r\n//           </label>\r\n//           <label>Verification Code:\r\n//             <input type=\"text\" value={verificationCode} onChange={handleVerificationCodeChange} />\r\n//           </label>\r\n//           <button type=\"button\" onClick={verifyCode}>Verify Code</button>\r\n//         </div>\r\n//       ) : (\r\n//         <div>\r\n//           <label>Email:\r\n//             <input type=\"email\" value={email} onChange={handleEmailChange} />\r\n//           </label>\r\n//           <button type=\"button\" onClick={sendVerificationCode}>Send Verification Code</button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export { LoginPage };\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';  // Make sure to import Axios\r\n\r\nconst LoginPage = () => {\r\n  const [email, setEmail] = useState<string>('');\r\n  const [secretCode, setSecretCode] = useState<string>('');\r\n  const [loggedInUser, setLoggedInUser] = useState<{ role: string; token: string }>({\r\n    role: '',\r\n    token: '',\r\n  });\r\n\r\n  const checkAdminEmail = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        'https://server-your-price-booking.onrender.com/api/acsess-to-admin/check-admin'\r\n      );\r\n      setEmail(response.data.email as string);\r\n    } catch (error) {\r\n      console.error('Error checking admin email:', error);\r\n    }\r\n  };\r\n\r\n  const loginAdmin = async () => {\r\n    try {\r\n      const response = await axios.post(\r\n        'https://server-your-price-booking.onrender.com/api/acsess-to-admin/log-in-admin',\r\n        {\r\n          email,\r\n          secretCode,\r\n        }\r\n      );\r\n      setLoggedInUser(response.data.user as { role: string; token: string });\r\n    } catch (error) {\r\n      console.error('Error logging in:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    {!email ? (\r\n      <button type=\"button\" onClick={checkAdminEmail}>Check Admin Email</button>\r\n    ) : (\r\n      <div>\r\n        <p>Admin Email: {email}</p>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Secret Code\"\r\n          value={secretCode}\r\n          onChange={(e) => setSecretCode(e.target.value)}\r\n        />\r\n        <button type=\"submit\" onClick={loginAdmin}>Login</button>\r\n      </div>\r\n    )}\r\n    {loggedInUser && (\r\n      <div>\r\n        <p>Welcome, {loggedInUser.role}</p>\r\n        <p>Token: {loggedInUser.token}</p>\r\n      </div>\r\n    )}\r\n  </div>\r\n  );\r\n};\r\n\r\nexport  {LoginPage};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}